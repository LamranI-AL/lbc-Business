/** 
 * Script de test pour v√©rifier les fonctionnalit√©s de r√©servation
 * Usage: node test-booking.js
 */

const fs = require('fs');
const path = require('path');

console.log('üß™ Test de v√©rification des modifications...\n');

// V√©rifier que le fichier BookingForm.tsx contient les bonnes modifications
const bookingFormPath = path.join(__dirname, 'src/components/Booking/BookingForm.tsx');

if (!fs.existsSync(bookingFormPath)) {
  console.error('‚ùå Fichier BookingForm.tsx introuvable');
  process.exit(1);
}

const bookingFormContent = fs.readFileSync(bookingFormPath, 'utf8');

// Tests √† effectuer
const tests = [
  {
    name: 'Configuration EmailJS d√©comment√©e',
    check: content => content.includes('const EMAILJS_CONFIG = {') && !content.includes('// const EMAILJS_CONFIG'),
    description: 'V√©rifier que EmailJS est activ√©'
  },
  {
    name: 'Fonction sendConfirmationEmail active',
    check: content => content.includes('const sendConfirmationEmail = async') && !content.includes('// const sendConfirmationEmail'),
    description: 'V√©rifier que la fonction d\'envoi d\'email est active'
  },
  {
    name: '√âtats du calendrier ajout√©s',
    check: content => content.includes('[currentMonth, setCurrentMonth]') && content.includes('[calendarMode, setCalendarMode]'),
    description: 'V√©rifier que les nouveaux √©tats React sont pr√©sents'
  },
  {
    name: 'Navigation du calendrier',
    check: content => content.includes('goToPreviousMonth') && content.includes('goToNextMonth'),
    description: 'V√©rifier que la navigation est impl√©ment√©e'
  },
  {
    name: 'Mode double vue',
    check: content => content.includes('Vue Mois') && content.includes('Vue Ann√©e'),
    description: 'V√©rifier que les deux modes de vue sont pr√©sents'
  },
  {
    name: 'Variables d\'environnement',
    check: content => content.includes('process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID'),
    description: 'V√©rifier l\'utilisation des variables d\'environnement'
  }
];

// Ex√©cuter les tests
let passedTests = 0;
tests.forEach((test, index) => {
  const passed = test.check(bookingFormContent);
  console.log(`${passed ? '‚úÖ' : '‚ùå'} Test ${index + 1}: ${test.name}`);
  if (passed) passedTests++;
  console.log(`   ${test.description}\n`);
});

// V√©rifier la pr√©sence du fichier .env.local.example
const envExamplePath = path.join(__dirname, '.env.local.example');
const hasEnvExample = fs.existsSync(envExamplePath);
console.log(`${hasEnvExample ? '‚úÖ' : '‚ùå'} Fichier .env.local.example cr√©√©\n`);
if (hasEnvExample) passedTests++;

// R√©sum√©
console.log('üìä R√âSUM√â DES TESTS');
console.log('='.repeat(30));
console.log(`Tests r√©ussis: ${passedTests}/${tests.length + 1}`);
console.log(`Pourcentage: ${Math.round((passedTests / (tests.length + 1)) * 100)}%`);

if (passedTests === tests.length + 1) {
  console.log('\nüéâ TOUS LES TESTS SONT PASS√âS !');
  console.log('‚úÖ Le calendrier et le syst√®me d\'email sont correctement configur√©s.');
  console.log('\nüìù PROCHAINES √âTAPES:');
  console.log('1. Copier .env.local.example vers .env.local');
  console.log('2. Configurer votre compte EmailJS');
  console.log('3. Tester en mode d√©veloppement: npm run dev');
  console.log('4. V√©rifier les envois d\'email en production');
} else {
  console.log('\n‚ö†Ô∏è  CERTAINS TESTS ONT √âCHOU√â');
  console.log('V√©rifiez les modifications dans BookingForm.tsx');
}

console.log('\nüîó Ressources utiles:');
console.log('- EmailJS: https://emailjs.com');
console.log('- Documentation: voir CALENDAR_EMAIL_FIXES.md');
console.log('- Support: voir README.md');